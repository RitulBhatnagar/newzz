"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-text-truncate";
exports.ids = ["vendor-chunks/react-text-truncate"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-text-truncate/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-text-truncate/lib/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n(function(global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            exports,\n            __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"),\n            __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else { var mod; }\n})(void 0, function(exports1, _react, _propTypes) {\n    \"use strict\";\n    Object.defineProperty(exports1, \"__esModule\", {\n        value: true\n    });\n    exports1.default = undefined;\n    var _react2 = _interopRequireDefault(_react);\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n    function _typeof(obj) {\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof(obj);\n    }\n    function _objectWithoutProperties(source, excluded) {\n        if (source == null) return {};\n        var target = _objectWithoutPropertiesLoose(source, excluded);\n        var key, i;\n        if (Object.getOwnPropertySymbols) {\n            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n            for(i = 0; i < sourceSymbolKeys.length; i++){\n                key = sourceSymbolKeys[i];\n                if (excluded.indexOf(key) >= 0) continue;\n                if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n    function _objectWithoutPropertiesLoose(source, excluded) {\n        if (source == null) return {};\n        var target = {};\n        var sourceKeys = Object.keys(source);\n        var key, i;\n        for(i = 0; i < sourceKeys.length; i++){\n            key = sourceKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n        return target;\n    }\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n    function _defineProperties(target, props) {\n        for(var i = 0; i < props.length; i++){\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n    }\n    function _possibleConstructorReturn(self, call) {\n        if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n        }\n        return _assertThisInitialized(self);\n    }\n    function _getPrototypeOf(o) {\n        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n        };\n        return _getPrototypeOf(o);\n    }\n    function _assertThisInitialized(self) {\n        if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n        return self;\n    }\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) _setPrototypeOf(subClass, superClass);\n    }\n    function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n        };\n        return _setPrototypeOf(o, p);\n    }\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    var PRECISION = 0.0001;\n    var isEqual = function isEqual(n1, n2) {\n        return Math.abs(n1 - n2) < PRECISION;\n    };\n    var TextTruncate = function(_Component) {\n        _inherits(TextTruncate, _Component);\n        function TextTruncate() {\n            var _getPrototypeOf2;\n            var _this;\n            _classCallCheck(this, TextTruncate);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextTruncate)).call.apply(_getPrototypeOf2, [\n                this\n            ].concat(args)));\n            _defineProperty(_assertThisInitialized(_this), \"onResize\", function() {\n                if (_this.rafId) {\n                    window.cancelAnimationFrame(_this.rafId);\n                }\n                _this.rafId = window.requestAnimationFrame(_this.update.bind(_assertThisInitialized(_this)));\n            });\n            _defineProperty(_assertThisInitialized(_this), \"onToggled\", function(truncated) {\n                typeof _this.props.onToggled === \"function\" && setTimeout(function() {\n                    return _this.props.onToggled(truncated);\n                }, 0);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"onTruncated\", function() {\n                typeof _this.props.onTruncated === \"function\" && setTimeout(function() {\n                    return _this.props.onTruncated();\n                }, 0);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"onCalculated\", function() {\n                typeof _this.props.onCalculated === \"function\" && setTimeout(function() {\n                    return _this.props.onCalculated();\n                }, 0);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"update\", function() {\n                var style = window.getComputedStyle(_this.scope);\n                var font = [\n                    style[\"font-weight\"],\n                    style[\"font-style\"],\n                    style[\"font-size\"],\n                    style[\"font-family\"],\n                    style[\"letter-spacing\"]\n                ].join(\" \");\n                _this.canvas.font = font;\n                _this.forceUpdate();\n            });\n            return _this;\n        }\n        _createClass(TextTruncate, [\n            {\n                key: \"componentDidMount\",\n                value: function componentDidMount() {\n                    var canvas = document.createElement(\"canvas\");\n                    var docFragment = document.createDocumentFragment();\n                    var style = window.getComputedStyle(this.scope);\n                    var font = [\n                        style[\"font-weight\"],\n                        style[\"font-style\"],\n                        style[\"font-size\"],\n                        style[\"font-family\"]\n                    ].join(\" \");\n                    docFragment.appendChild(canvas);\n                    this.canvas = canvas.getContext(\"2d\");\n                    this.canvas.font = font;\n                    this.forceUpdate();\n                    window.addEventListener(\"resize\", this.onResize);\n                }\n            },\n            {\n                key: \"componentWillUnmount\",\n                value: function componentWillUnmount() {\n                    window.removeEventListener(\"resize\", this.onResize);\n                    if (this.rafId) {\n                        window.cancelAnimationFrame(this.rafId);\n                    }\n                }\n            },\n            {\n                key: \"measureWidth\",\n                value: function measureWidth(text) {\n                    return this.canvas.measureText(text).width;\n                }\n            },\n            {\n                key: \"getRenderText\",\n                value: function getRenderText() {\n                    var _this$props = this.props, containerClassName = _this$props.containerClassName, element = _this$props.element, line = _this$props.line, onCalculated = _this$props.onCalculated, onTruncated = _this$props.onTruncated, onToggled = _this$props.onToggled, text = _this$props.text, textElement = _this$props.textElement, textTruncateChild = _this$props.textTruncateChild, truncateText = _this$props.truncateText, maxCalculateTimes = _this$props.maxCalculateTimes, props = _objectWithoutProperties(_this$props, [\n                        \"containerClassName\",\n                        \"element\",\n                        \"line\",\n                        \"onCalculated\",\n                        \"onTruncated\",\n                        \"onToggled\",\n                        \"text\",\n                        \"textElement\",\n                        \"textTruncateChild\",\n                        \"truncateText\",\n                        \"maxCalculateTimes\"\n                    ]);\n                    var scopeWidth = this.scope.getBoundingClientRect().width; // return if display:none\n                    if (scopeWidth === 0) {\n                        return null;\n                    }\n                    var fullTextWidth = this.measureWidth(text); // return if all of text can be displayed\n                    if (scopeWidth > fullTextWidth || isEqual(scopeWidth, fullTextWidth)) {\n                        this.onToggled(false);\n                        return (0, _react.createElement)(textElement, props, text);\n                    }\n                    var childText = \"\";\n                    if (textTruncateChild && typeof textTruncateChild.type === \"string\") {\n                        var type = textTruncateChild.type;\n                        if (type.indexOf(\"span\") >= 0 || type.indexOf(\"a\") >= 0) {\n                            childText = textTruncateChild.props.children;\n                        }\n                    }\n                    var currentPos = 1;\n                    var maxTextLength = text.length;\n                    var truncatedText = \"\";\n                    var splitPos = 0;\n                    var startPos = 0;\n                    var displayLine = line;\n                    var width = 0;\n                    var lastIsEng = false;\n                    var isPrevLineWithoutSpace = false;\n                    var lastPos = 0;\n                    var lastSpaceIndex = -1;\n                    var ext = \"\";\n                    var loopCnt = 0;\n                    while(displayLine-- > 0){\n                        ext = displayLine ? \"\" : truncateText + (childText ? \" \" + childText : \"\");\n                        while(currentPos <= maxTextLength){\n                            truncatedText = text.substr(startPos, currentPos);\n                            width = this.measureWidth(truncatedText + ext);\n                            if (width < scopeWidth) {\n                                splitPos = text.indexOf(\" \", currentPos + 1);\n                                if (splitPos === -1) {\n                                    currentPos += 1;\n                                    lastIsEng = false;\n                                } else {\n                                    lastIsEng = true;\n                                    currentPos = splitPos;\n                                }\n                            } else {\n                                do {\n                                    if (loopCnt++ >= maxCalculateTimes) {\n                                        break;\n                                    }\n                                    truncatedText = text.substr(startPos, currentPos);\n                                    if (!displayLine) {\n                                        currentPos--;\n                                    }\n                                    if (truncatedText[truncatedText.length - 1] === \" \") {\n                                        truncatedText = text.substr(startPos, currentPos - 1);\n                                    }\n                                    if (lastIsEng) {\n                                        lastSpaceIndex = truncatedText.lastIndexOf(\" \");\n                                        if (lastSpaceIndex > -1) {\n                                            currentPos = lastSpaceIndex;\n                                            if (displayLine) {\n                                                currentPos++;\n                                            }\n                                            truncatedText = text.substr(startPos, currentPos);\n                                        } else {\n                                            currentPos--;\n                                            truncatedText = text.substr(startPos, currentPos);\n                                        }\n                                    } else {\n                                        currentPos--;\n                                        truncatedText = text.substr(startPos, currentPos);\n                                    }\n                                    width = this.measureWidth(truncatedText + ext);\n                                }while ((width > scopeWidth || isEqual(width, scopeWidth)) && truncatedText.length > 0);\n                                startPos += currentPos;\n                                break;\n                            }\n                        }\n                        if (currentPos >= maxTextLength) {\n                            startPos = maxTextLength;\n                            break;\n                        }\n                        if (lastIsEng && !isPrevLineWithoutSpace && text.substr(lastPos, currentPos).indexOf(\" \") === -1) {\n                            isPrevLineWithoutSpace = text.substr(lastPos, currentPos).indexOf(\" \") === -1;\n                            displayLine--;\n                        }\n                        lastPos = currentPos + 1;\n                    }\n                    if (startPos === maxTextLength) {\n                        this.onToggled(false);\n                        return (0, _react.createElement)(textElement, props, text);\n                    }\n                    this.onTruncated();\n                    this.onToggled(true);\n                    return _react2[\"default\"].createElement(\"span\", props, (0, _react.createElement)(textElement, props, text.substr(0, startPos) + truncateText + \" \"), textTruncateChild);\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this2 = this;\n                    var _this$props2 = this.props, element = _this$props2.element, text = _this$props2.text, _this$props2$style = _this$props2.style, style = _this$props2$style === void 0 ? {} : _this$props2$style, containerClassName = _this$props2.containerClassName, line = _this$props2.line, onCalculated = _this$props2.onCalculated, onTruncated = _this$props2.onTruncated, onToggled = _this$props2.onToggled, textElement = _this$props2.textElement, textTruncateChild = _this$props2.textTruncateChild, truncateText = _this$props2.truncateText, maxCalculateTimes = _this$props2.maxCalculateTimes, props = _objectWithoutProperties(_this$props2, [\n                        \"element\",\n                        \"text\",\n                        \"style\",\n                        \"containerClassName\",\n                        \"line\",\n                        \"onCalculated\",\n                        \"onTruncated\",\n                        \"onToggled\",\n                        \"textElement\",\n                        \"textTruncateChild\",\n                        \"truncateText\",\n                        \"maxCalculateTimes\"\n                    ]);\n                    var fontWeight = style.fontWeight, fontStyle = style.fontStyle, fontSize = style.fontSize, fontFamily = style.fontFamily;\n                    var renderText = this.scope && line ? this.getRenderText() : (0, _react.createElement)(textElement, props, text);\n                    var rootProps = {\n                        ref: function ref(el) {\n                            _this2.scope = el;\n                        },\n                        className: containerClassName,\n                        style: {\n                            overflow: \"hidden\",\n                            fontWeight: fontWeight,\n                            fontStyle: fontStyle,\n                            fontSize: fontSize,\n                            fontFamily: fontFamily\n                        }\n                    };\n                    this.scope && this.onCalculated();\n                    return (0, _react.createElement)(element, rootProps, renderText);\n                }\n            }\n        ]);\n        return TextTruncate;\n    }(_react.Component);\n    _defineProperty(TextTruncate, \"propTypes\", {\n        containerClassName: _propTypes2[\"default\"].string,\n        element: _propTypes2[\"default\"].string,\n        line: _propTypes2[\"default\"].oneOfType([\n            _propTypes2[\"default\"].number,\n            _propTypes2[\"default\"].bool\n        ]),\n        onCalculated: _propTypes2[\"default\"].func,\n        onTruncated: _propTypes2[\"default\"].func,\n        onToggled: _propTypes2[\"default\"].func,\n        text: _propTypes2[\"default\"].string,\n        textElement: _propTypes2[\"default\"].elementType,\n        textTruncateChild: _propTypes2[\"default\"].node,\n        truncateText: _propTypes2[\"default\"].string,\n        maxCalculateTimes: _propTypes2[\"default\"].number\n    });\n    _defineProperty(TextTruncate, \"defaultProps\", {\n        element: \"div\",\n        line: 1,\n        text: \"\",\n        textElement: \"span\",\n        truncateText: \"…\",\n        maxCalculateTimes: 10\n    });\n    exports1.default = TextTruncate;\n    ;\n    module.exports = exports1.default;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-text-truncate/lib/index.js\n");

/***/ })

};
;